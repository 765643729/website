@{
    Layout = "/_Master.cshtml";

    IgnoreBody();

    ViewData[Keys.Title] = Model.String("Name");

    string type = Model.String("Type");
    string name = Model.String("Name");
    string nuget = Model.String("NuGet");
    string description = Model.String("Description");
    string author = Model.String("Author");
    string repository = Model.String("Repository");
    string version = Model.String("Version");
    string supportedCakeVersions = Model.String("SupportedCakeVersions");
    string categories = (String.Join(" ", Model.List<string>("Categories").Select(x => $"<span class=\"badge badge-secondary\">{x}</span>")));
    var assemblies = Model.List<string>("Assemblies");
}

<section class="content-header">
    <h1>@name</h1>
</section>

<section class="content">
    <article class="col-sm-8 extension-details no-padding">
        <p class="extension-description">
            @description
        </p>

        @switch (type) { 
            case "Addin":
                @Html.Partial("_UsageAddin");
                break;
        }

        @if (type != null && type.Equals("Addin", StringComparison.OrdinalIgnoreCase) && assemblies != null)
        {
            <h2 class="no-anchor">Aliases</h2>

            // Read classes containing aliases from current addin.
            var aliasClasses =
                Documents["Aliases"]
                    .Where(
                        aliasDocument =>
                            aliasDocument != null &&
                            aliasDocument.Document(CodeAnalysisKeys.ContainingAssembly) != null &&
                            assemblies.Any(
                                addinAssembly =>
                                    addinAssembly != null &&
                                    addinAssembly.Contains(
                                        aliasDocument.Document(CodeAnalysisKeys.ContainingAssembly).String("Name") + ".dll")));

            // Show summary of aliases class
            var summary =
                aliasClasses
                    .Select(x => x.String(CodeAnalysisKeys.Summary))
                    .FirstOrDefault(x => !string.IsNullOrEmpty(x));
            @if(!string.IsNullOrWhiteSpace(summary))
            {
                <div>@Html.Raw(summary)</div>
            }

            @Html.Partial(
                "_AliasesList",
                aliasClasses,
                new ViewDataDictionary(ViewData)
                {
                    { "groupHeadingLevel", 3 },
                    { "showAddinReference", false }
                })
        }
    </article>

    <aside class="col-sm-4 extension-info" aria-label="Extension info" >
        <h2 class="no-anchor">Info</h2>
        <ul class="list-unstyled">
            <li>
                Latest version: @version
            </li>
            @if (!string.IsNullOrWhiteSpace(supportedCakeVersions))
            {
            <li>
                Supported Cake versions: @supportedCakeVersions
            </li>
            }
            <li>
                <img src="/assets/img/nuget.png">
                <a href="https://www.nuget.org/packages/@nuget" target="_blank">@nuget</a>
            </li>
            <li>
                <i class="fa fa-github"></i>
                <a href="@repository" target="_blank">@repository.Replace("https://github.com/", string.Empty).TrimEnd('/')</a>
                @if (repository.StartsWith("https://github.com/cake-contrib/"))
                {
                    <a href="/community/cake-contrib">
                        <i class="fa fa-check-circle" data-toggle="tooltip" title="Source code hosted in cake-contrib organization"></i>
                    </a>
                }
            </li>
        </ul>

        <h2 class="no-anchor">Authors</h2>
        <p>
            @author
        </p>

        <h2 class="no-anchor">Categories</h2>
        <p>
            @Html.Raw(categories)
        </p>
    </aside>
</section>